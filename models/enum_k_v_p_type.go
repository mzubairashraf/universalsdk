// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// EnumKVPType Used to describe the contents of the KVP data.
//
// The general.* and raw.* types are pretty much what they say on the tin.
//
// All raw.* fields will be base64 encoded so as to not interfere with JSON structuring. These are useful for returning/storing large quantities of data that doesn't necessarily require processing now, or may be useful to a calling client.
//
// The id.* and pii.* are used to indicate that this is data that can be used to create new document objects, or entities. They should also be treated with the utmost care and attention when it comes to securing them too.
//
// id.external can be used to capture an object's ID on an external service, and can potentially be searchable in the index
// Note: This is different from a result.id.
//
// result.* are used to capture response codes and transaction IDs from external services
//
// error.* types can be used when processing a document that returns an error, but doesn't necessarily require a full blown error response.
//
// swagger:model enumKVPType
type EnumKVPType string

const (

	// EnumKVPTypeGeneralString captures enum value "general.string"
	EnumKVPTypeGeneralString EnumKVPType = "general.string"

	// EnumKVPTypeGeneralInteger captures enum value "general.integer"
	EnumKVPTypeGeneralInteger EnumKVPType = "general.integer"

	// EnumKVPTypeGeneralFloat captures enum value "general.float"
	EnumKVPTypeGeneralFloat EnumKVPType = "general.float"

	// EnumKVPTypeGeneralBool captures enum value "general.bool"
	EnumKVPTypeGeneralBool EnumKVPType = "general.bool"
)

// for schema
var enumKVPTypeEnum []interface{}

func init() {
	var res []EnumKVPType
	if err := json.Unmarshal([]byte(`["general.string","general.integer","general.float","general.bool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enumKVPTypeEnum = append(enumKVPTypeEnum, v)
	}
}

func (m EnumKVPType) validateEnumKVPTypeEnum(path, location string, value EnumKVPType) error {
	if err := validate.Enum(path, location, value, enumKVPTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this enum k v p type
func (m EnumKVPType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEnumKVPTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
